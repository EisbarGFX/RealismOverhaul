// Handle TF interop
@PART:HAS[@TESTFLIGHT,@MODULE[TestFlightInterop]]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	!TESTFLIGHT,* {} // something else is configuring TF, so don't do it.
}
@PART:HAS[@TESTFLIGHT,!MODULE[TestFlightInterop]]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	MODULE
	{
		name = TestFlightInterop
	}
}
// Preprocess
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@TESTFLIGHT:HAS[~name[]]
	{
		name = TFGenericMissingName
	}
	
	@TESTFLIGHT,*
	{
		// First, set the 'mainConf' to be the name of the engine config we will bind to.
		temp = engineConfig =
		mainConf = #$temp$ $name$:$name$
		!temp = DEL
		
		// Set default parameters for the curve.
		// TF configs generally have a "kink" in their du->reliability curve,
		// where reliability hits the midpoint. Usually you hit 50% reliability
		// gains well before you get 50% data.
		// This sets up the default parameters which we can override as desired.
		kinkV = 0.75
		kinkH = 0.4
		kinkW = 0.5
		
		// This is the internal name for "how many engines are in this cluster"
		numThings = 1.0
		
		// This is the internal multiplier to data produced
		dataMult = 1.0
		
		// We set the names of modules by variable because in some cases
		// we want the ability to disable some but not all failures
		// (see below for solids)
		rmtName = TestFlightFailure_ReducedMaxThrust
		eplName = TestFlightFailure_EnginePerformanceLoss
		shutdownName = TestFlightFailure_ShutdownEngine
		
		// Default multiplier to failure chance from dynamic pressure
		qMult = 1.0
		
		// Start tech transfer out blank
		tech =  
		
		// Default value for ignition failure chance on additional ignitions
		additionalIgnitionFailChance = 0.2
		
		//Create placeholder flat curve for cont burn time. 3 keys needed?
		continuousCycle
		{
			key = 0 1
			key = 1 1
			key = 2 1
		}
		
		//Create placeholder flat curve
		restartWindowPenalty
		{
			key = 0 1
			key = 1 1
		}
		
		//create placeholder
		OBPenalty = 2.0
	}
	
	// ** Now we detect and override a bunch of the above default values
	// i.e. if the node has what we're looking for, clobber the default value
	// with the user-set value.
	
	// We can explicitly set a main configuration
	@TESTFLIGHT:HAS[#mainConfiguration]
	{
		@mainConf = #$mainConfiguration$
	}
	
	// We can override the kink parameters.
	@TESTFLIGHT:HAS[#reliabilityMidV]
	{
		@kinkV = #$reliabilityMidV$
	}
	@TESTFLIGHT:HAS[#reliabilityMidTangentWeight]
	{
		@kinkW = #$reliabilityMidTangentWeight$
	}
	@TESTFLIGHT:HAS[#reliabilityMidH]
	{
		@kinkH = #$reliabilityMidH$
	}
	
	// Override the data rate multiplier, if specified
	@TESTFLIGHT:HAS[#reliabilityDataRateMultiplier]
	{
		@dataMult = #$reliabilityDataRateMultiplier$
	}
	
	// Override dynamic pressure multiplier to ignition failure chance, if specified.
	@TESTFLIGHT:HAS[#ignitionDynPresFailMultiplier]
	{
		@qMult = #$ignitionDynPresFailMultiplier$
	}
	
	// Copy in our tech transfer if specified
	@TESTFLIGHT:HAS[#techTransfer]
	{
		@tech = #$techTransfer$
	}
	
	// Special handling for solids -- they don't get some failure types.
	// We solve this by creating MODULEs with bogus names, which KSP
	// then happily doesn't load.
	@TESTFLIGHT:HAS[#isSolid[?rue]]
	{
		// Reduce max thrust is disabled.
		@rmtName = DISABLED_TestFlightFailure_ReducedMaxThrust
		@shutdownName = DISABLED_TestFlightFailure_ShutdownEngine
		// ordinarily we'd put EPL here too, but that applies to solids.
	}
	
	// Override cluster multiplier
	@TESTFLIGHT:HAS[#clusterMultiplier]
	{
		@numThings = #$clusterMultiplier$
	}
	
	// If we are not setting an explicit data rate,
	// then we normalize it based on the burn time.
	@TESTFLIGHT:HAS[~explicitDataRate[?rue]]
	{
		@dataMult *= 640 // normalized to rate=4 at 160s burntime
		@dataMult /= #$ratedBurnTime$
	}
	
	// Override additional-ignition failure chance.
	@TESTFLIGHT:HAS[#additionalIgnitionFailureChance]
	{
		@additionalIgnitionFailChance = #$additionalIgnitionFailureChance$
	}
	
	//Override overburn penalty if specified
	@TESTFLIGHT:HAS[#overburnPenalty]
	{
		@OBPenalty = #$overburnPenalty$
	}
	
	// Now we create the actual curves for TestFlight.
	@TESTFLIGHT,*
	{
		// Perform a transformation to decrease reliability
		// of ignitions on clusters. We do this for both start and end of curve.
		// Note that since reliability starts <= 1.0,
		// multiplying by -1 and then adding 1 gives us
		// the failure chance rather than the ignition chance.
		// With that we multiply the failure chance by the
		// cluter mult, then transform back.
		@ignitionReliabilityStart *= -1
		@ignitionReliabilityStart += 1
		@ignitionReliabilityStart *= #$numThings$
		@ignitionReliabilityStart -= 1
		@ignitionReliabilityStart *= -1
		
		@ignitionReliabilityEnd *= -1
		@ignitionReliabilityEnd += 1
		@ignitionReliabilityEnd *= #$numThings$
		@ignitionReliabilityEnd -= 1
		@ignitionReliabilityEnd *= -1
		
		// Now we do the same thing for cycle reliability.
		
		@cycleReliabilityStart *= -1
		@cycleReliabilityStart += 1
		@cycleReliabilityStart *= #$numThings$
		@cycleReliabilityStart -= 1
		@cycleReliabilityStart *= -1
		
		@cycleReliabilityEnd *= -1
		@cycleReliabilityEnd += 1
		@cycleReliabilityEnd *= #$numThings$
		@cycleReliabilityEnd -= 1
		@cycleReliabilityEnd *= -1
		
		// Multiply data rate by cluster multiplier.
		@dataMult *= #$numThings$
		
		// Start creating our fail chance curve.
		// Again, transform from reliability to failure chance
		// so we can apply cluster mult.
		failChanceStart = #$cycleReliabilityStart$
		@failChanceStart *= -1
		@failChanceStart += 1
		@failChanceStart /= #$ratedBurnTime$
		failChanceEnd = #$cycleReliabilityEnd$
		@failChanceEnd *= -1
		@failChanceEnd += 1
		@failChanceEnd /= #$ratedBurnTime$

		// Let's put the reliability curve magic in here to simplify the iteration copies below.
		reliabilityCurve
		{
			// Create first key
			key10 = 0
			key11 = #$../failChanceStart$
			
			// Calculate kink time
			key20 = #$../kinkH$
			@key20 *= 5000
			@key20 += 1000
			
			// Calculate kink value
			key21 = #$../failChanceEnd$
			@key21 -= #$../failChanceStart$
			@key21 *= #$../kinkV$
			@key21 += #$../failChanceStart$
			
			// Calculate kink tangent
			key22 = #$../failChanceEnd$
			@key22 -= #$../failChanceStart$
			@key22 *= 0.0001
			@key22 *= #$../kinkW$
			// now average it with the linear tangent to the endpoint
			key221 = #$../failChanceEnd$
			@key221 -= #$key21$
			key222 = 10000
			@key222 -= #$key20$
			@key221 /= #$key222$
			@key222 = #$../kinkW$
			@key222 *= -1
			@key222 += 1
			@key221 *= #$key222$
			@key22 += #$key221$
			
			// Create end key
			key30 = 10000
			key31 = #$../failChanceEnd$
			key32 = 0 // flat tangent
			
			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$
			
			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
			!key221 = DEL
			!key222 = DEL
		}
		// Let's put the engine cycle curve magic in here, too.
		cycle
		{
			key = 0.00 10.00
			key = 5.00 1.00 -0.8 0

			btPlus = #$../ratedBurnTime$
			@btPlus += 5 // cushion
			bt25 = #$../ratedBurnTime$
			@bt25 *= 2.5
			@bt25 += 5
			timeDelta = #$bt25$
			@timeDelta -= #$btPlus$
			slope = 292.8
			@slope /= #$timeDelta$

			key = #$btPlus$ 1 0 0
			key = #$bt25$ 100 $slope$ 0

			!btPlus = DEL
			!bt25 = DEL
			!timeDelta = DEL
			!slope = DEL
		}
		// Let's put the engine ignition curve magic in here, too.
		baseIgnitionChance
		{
			// Create first key
			key10 = 0
			key11 = #$../ignitionReliabilityStart$
			
			// Calculate kink time
			key20 = #$../kinkH$
			@key20 *= 5000
			@key20 += 1000
			
			// Calculate kink value
			key21 = #$../ignitionReliabilityEnd$
			@key21 -= #$../ignitionReliabilityStart$
			@key21 *= #$../kinkV$
			@key21 += #$../ignitionReliabilityStart$
			
			// Calculate kink tangent
			// tangent = Y/X
			key22 = #$../ignitionReliabilityEnd$
			@key22 -= #$../ignitionReliabilityStart$
			@key22 *= 0.0001
			@key22 *= #$../kinkW$
			// now average it with the linear tangent to the endpoint
			key221 = #$../ignitionReliabilityEnd$
			@key221 -= #$key21$
			key222 = 10000
			@key222 -= #$key20$
			@key221 /= #$key222$
			@key222 = #$../kinkW$
			@key222 *= -1
			@key222 += 1
			@key221 *= #$key222$
			@key22 += #$key221$
			
			// Create end key
			key30 = 10000
			key31 = #$../ignitionReliabilityEnd$
			key32 = 0 // flat intangent
			
			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$
			
			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key221 = DEL
			!key222 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
		}
	}
	@TESTFLIGHT:HAS[#ratedContinuousBurnTime]
	{
		//create continuous cycle curve when needed
		@continuousCycle
		{
			//delete placeholder keys
			!key = DEL
			!key = DEL
			!key = DEL

			key = 0.00 1.00		//No ignition penalty, don't wanna overcharge
			key = 1.00 1.00

			btPlus = #$../ratedContinuousBurnTime$
			@btPlus += 5 // cushion
			bt25 = #$../ratedContinuousBurnTime$
			@bt25 *= 2.5
			@bt25 += 5
			timeDelta = #$bt25$
			@timeDelta -= #$btPlus$
			slope = 292.8
			@slope /= #$timeDelta$

			key = #$btPlus$ 1 0 0
			key = #$bt25$ 100 $slope$ 0		//Keep the same 100x penalty, 2.5 times rated burn is still pretty generous

			!btPlus = DEL
			!bt25 = DEL
			!timeDelta = DEL
			!slope = DEL
		}
	}

	//create curve with gentle failure curve instead, for engines that can be safely overburned
	//This can probably be done by just editing key indexes, but I don't know how to do that
	@TESTFLIGHT:HAS[#safeOverburn[?rue]]
	{
		@cycle
		{
			//delete existing keys
			!key = DEL
			!key = DEL
			!key = DEL
			!key = DEL

			//Rerun, but with new key values
			key = 0.00 10.00
			key = 5.00 1.00 -0.8 0

			btPlus = #$../ratedBurnTime$
			@btPlus += 5 // cushion
			bt25 = #$../ratedBurnTime$
			@bt25 *= 2.5
			@bt25 += 5
			//timeDelta = #$bt25$		//cant get slope to cooperate, just use 0 for tangent
			//@timeDelta -= #$btPlus$
			//slope = 5.8
			//@slope /= #$timeDelta$

			key = #$btPlus$ 1 0 0
			key = #$bt25$ $../OBPenalty$ 0 0		//2 times penalty instead. continuousCycle will apply the big penalty instead

			!btPlus = DEL
			!bt25 = DEL
			!timeDelta = DEL
			!slope = DEL
		}
		!safeOverburn = DEL
		//!OBPenalty = DEL		//do not delete this, it needs to be used during the iterative phase
	}

	//Set ratedContinuousBurnTime to ratedBurnTime if it isn't explicitly set
	@TESTFLIGHT:HAS[~ratedContinuousBurnTime]
	{
		ratedContinuousBurnTime = #$ratedBurnTime$
		!OBPenalty = DEL		//If rated cont burn time isn't set we don't use OBPenatly, so delete it here
	}

}

// Create uninitalized nodes
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	MODULE
	{
		name = TestFlightCore
		configVersion = 2
	}
	MODULE
	{
		name = FlightDataRecorder_Engine
		configVersion = 2
	}
	MODULE
	{
		name = TestFlightReliability
		configVersion = 2
	}
	MODULE
	{
		name = TestFlightReliability_EngineCycle
		configVersion = 2
	}
	MODULE
	{
		name = TestFlightFailure_EnginePerformanceLoss
		configVersion = 2
	}
	MODULE
	{
		name = TestFlightFailure_IgnitionFail
		configVersion = 2
	}
	MODULE
	{
		name = TestFlightFailure_Explode
		configVersion = 2
	}
}
@PART:HAS[@TESTFLIGHT:HAS[!isSolid[?rue]]]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	MODULE
	{
		name = TestFlightFailure_ShutdownEngine
		configVersion = 2
	}
	MODULE
	{
		name = TestFlightFailure_ReducedMaxThrust
		configVersion = 2
	}
}

// Iterate over each TESTFLIGHT node, appending new config data into each module.
// Stripped the constant data from the iterations.  That gets patched in at the end.
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@MODULE[TestFlightCore]
	{
		CONFIG
		{
			title = #$../../TESTFLIGHT,0/name$
			configuration = #$../../TESTFLIGHT,0/mainConf$
			techTransfer = #$../../TESTFLIGHT,0/tech$
		}
	}
	@MODULE[FlightDataRecorder_Engine]
	{
		CONFIG 
		{
			configuration = #$../../TESTFLIGHT,0/name$
			flightDataMultiplier = #$../../TESTFLIGHT,0/dataMult$
		}
	}
	@MODULE[TestFlightReliability]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			reliabilityCurve
			{
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,0$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,1$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,2$
			}
		}
	}
	@MODULE[TestFlightReliability_EngineCycle]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			ratedBurnTime = #$../../TESTFLIGHT,0/ratedBurnTime$
			ratedContinuousBurnTime = #$../../TESTFLIGHT,0/ratedContinuousBurnTime$
			engineConfig = #$../../TESTFLIGHT,0/name$
			cycle
			{
				key = #$../../../TESTFLIGHT,0/cycle/key,0$
				key = #$../../../TESTFLIGHT,0/cycle/key,1$
				key = #$../../../TESTFLIGHT,0/cycle/key,2$
				key = #$../../../TESTFLIGHT,0/cycle/key,3$
			}
			continuousCycle
			{
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,0$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,1$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,2$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,3$
			}
		}
	}
	@MODULE[TestFlightFailure_IgnitionFail]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			additionalFailureChance = #$../../TESTFLIGHT,0/additionalIgnitionFailChance$
			pressureCurve
			{
				qMult = #$../../../TESTFLIGHT,0/qMult$
			}
			baseIgnitionChance
			{
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,0$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,1$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,2$
			}
			#/TESTFLIGHT,0/restartWindowPenalty {}
			@restartWindowPenalty
			{
				|_ = restartWindowPenalty
			}
		}
	}
	@MODULE[TestFlightFailure_ShutdownEngine]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_ReducedMaxThrust]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_EnginePerformanceLoss]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_Explode]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	
	!TESTFLIGHT,0 {} // remove the node we processed
}

// Iteration #2
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@MODULE[TestFlightCore]
	{
		CONFIG
		{
			title = #$../../TESTFLIGHT,0/name$
			configuration = #$../../TESTFLIGHT,0/mainConf$
			techTransfer = #$../../TESTFLIGHT,0/tech$
		}
	}
	@MODULE[FlightDataRecorder_Engine]
	{
		CONFIG 
		{
			configuration = #$../../TESTFLIGHT,0/name$
			flightDataMultiplier = #$../../TESTFLIGHT,0/dataMult$
		}
	}
	@MODULE[TestFlightReliability]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			reliabilityCurve
			{
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,0$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,1$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,2$
			}
		}
	}
	@MODULE[TestFlightReliability_EngineCycle]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			ratedBurnTime = #$../../TESTFLIGHT,0/ratedBurnTime$
			ratedContinuousBurnTime = #$../../TESTFLIGHT,0/ratedContinuousBurnTime$
			engineConfig = #$../../TESTFLIGHT,0/name$
			cycle
			{
				key = #$../../../TESTFLIGHT,0/cycle/key,0$
				key = #$../../../TESTFLIGHT,0/cycle/key,1$
				key = #$../../../TESTFLIGHT,0/cycle/key,2$
				key = #$../../../TESTFLIGHT,0/cycle/key,3$
			}
			continuousCycle
			{
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,0$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,1$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,2$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,3$
			}
		}
	}
	@MODULE[TestFlightFailure_IgnitionFail]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			additionalFailureChance = #$../../TESTFLIGHT,0/additionalIgnitionFailChance$
			pressureCurve
			{
				qMult = #$../../../TESTFLIGHT,0/qMult$
			}
			baseIgnitionChance
			{
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,0$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,1$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,2$
			}
			#/TESTFLIGHT,0/restartWindowPenalty {}
			@restartWindowPenalty
			{
				|_ = restartWindowPenalty
			}
		}
	}
	@MODULE[TestFlightFailure_ShutdownEngine]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_ReducedMaxThrust]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_EnginePerformanceLoss]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_Explode]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	
	!TESTFLIGHT,0 {} // remove the node we processed
}

// Iteration #3
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@MODULE[TestFlightCore]
	{
		CONFIG
		{
			title = #$../../TESTFLIGHT,0/name$
			configuration = #$../../TESTFLIGHT,0/mainConf$
			techTransfer = #$../../TESTFLIGHT,0/tech$
		}
	}
	@MODULE[FlightDataRecorder_Engine]
	{
		CONFIG 
		{
			configuration = #$../../TESTFLIGHT,0/name$
			flightDataMultiplier = #$../../TESTFLIGHT,0/dataMult$
		}
	}
	@MODULE[TestFlightReliability]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			reliabilityCurve
			{
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,0$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,1$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,2$
			}
		}
	}
	@MODULE[TestFlightReliability_EngineCycle]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			ratedBurnTime = #$../../TESTFLIGHT,0/ratedBurnTime$
			ratedContinuousBurnTime = #$../../TESTFLIGHT,0/ratedContinuousBurnTime$
			engineConfig = #$../../TESTFLIGHT,0/name$
			cycle
			{
				key = #$../../../TESTFLIGHT,0/cycle/key,0$
				key = #$../../../TESTFLIGHT,0/cycle/key,1$
				key = #$../../../TESTFLIGHT,0/cycle/key,2$
				key = #$../../../TESTFLIGHT,0/cycle/key,3$
			}
			continuousCycle
			{
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,0$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,1$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,2$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,3$
			}
		}
	}
	@MODULE[TestFlightFailure_IgnitionFail]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			additionalFailureChance = #$../../TESTFLIGHT,0/additionalIgnitionFailChance$
			pressureCurve
			{
				qMult = #$../../../TESTFLIGHT,0/qMult$
			}
			baseIgnitionChance
			{
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,0$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,1$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,2$
			}
			#/TESTFLIGHT,0/restartWindowPenalty {}
			@restartWindowPenalty
			{
				|_ = restartWindowPenalty
			}
		}
	}
	@MODULE[TestFlightFailure_ShutdownEngine]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_ReducedMaxThrust]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_EnginePerformanceLoss]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_Explode]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	
	!TESTFLIGHT,0 {} // remove the node we processed
}

// Iteration #4
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@MODULE[TestFlightCore]
	{
		CONFIG
		{
			title = #$../../TESTFLIGHT,0/name$
			configuration = #$../../TESTFLIGHT,0/mainConf$
			techTransfer = #$../../TESTFLIGHT,0/tech$
		}
	}
	@MODULE[FlightDataRecorder_Engine]
	{
		CONFIG 
		{
			configuration = #$../../TESTFLIGHT,0/name$
			flightDataMultiplier = #$../../TESTFLIGHT,0/dataMult$
		}
	}
	@MODULE[TestFlightReliability]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			reliabilityCurve
			{
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,0$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,1$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,2$
			}
		}
	}
	@MODULE[TestFlightReliability_EngineCycle]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			ratedBurnTime = #$../../TESTFLIGHT,0/ratedBurnTime$
			ratedContinuousBurnTime = #$../../TESTFLIGHT,0/ratedContinuousBurnTime$
			engineConfig = #$../../TESTFLIGHT,0/name$
			cycle
			{
				key = #$../../../TESTFLIGHT,0/cycle/key,0$
				key = #$../../../TESTFLIGHT,0/cycle/key,1$
				key = #$../../../TESTFLIGHT,0/cycle/key,2$
				key = #$../../../TESTFLIGHT,0/cycle/key,3$
			}
			continuousCycle
			{
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,0$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,1$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,2$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,3$
			}
		}
	}
	@MODULE[TestFlightFailure_IgnitionFail]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			additionalFailureChance = #$../../TESTFLIGHT,0/additionalIgnitionFailChance$
			pressureCurve
			{
				qMult = #$../../../TESTFLIGHT,0/qMult$
			}
			baseIgnitionChance
			{
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,0$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,1$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,2$
			}
			#/TESTFLIGHT,0/restartWindowPenalty {}
			@restartWindowPenalty
			{
				|_ = restartWindowPenalty
			}
		}
	}
	@MODULE[TestFlightFailure_ShutdownEngine]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_ReducedMaxThrust]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_EnginePerformanceLoss]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_Explode]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	
	!TESTFLIGHT,0 {} // remove the node we processed
}

// Iteration #5
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@MODULE[TestFlightCore]
	{
		CONFIG
		{
			title = #$../../TESTFLIGHT,0/name$
			configuration = #$../../TESTFLIGHT,0/mainConf$
			techTransfer = #$../../TESTFLIGHT,0/tech$
		}
	}
	@MODULE[FlightDataRecorder_Engine]
	{
		CONFIG 
		{
			configuration = #$../../TESTFLIGHT,0/name$
			flightDataMultiplier = #$../../TESTFLIGHT,0/dataMult$
		}
	}
	@MODULE[TestFlightReliability]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			reliabilityCurve
			{
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,0$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,1$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,2$
			}
		}
	}
	@MODULE[TestFlightReliability_EngineCycle]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			ratedBurnTime = #$../../TESTFLIGHT,0/ratedBurnTime$
			ratedContinuousBurnTime = #$../../TESTFLIGHT,0/ratedContinuousBurnTime$
			engineConfig = #$../../TESTFLIGHT,0/name$
			cycle
			{
				key = #$../../../TESTFLIGHT,0/cycle/key,0$
				key = #$../../../TESTFLIGHT,0/cycle/key,1$
				key = #$../../../TESTFLIGHT,0/cycle/key,2$
				key = #$../../../TESTFLIGHT,0/cycle/key,3$
			}
			continuousCycle
			{
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,0$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,1$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,2$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,3$
			}
		}
	}
	@MODULE[TestFlightFailure_IgnitionFail]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			additionalFailureChance = #$../../TESTFLIGHT,0/additionalIgnitionFailChance$
			pressureCurve
			{
				qMult = #$../../../TESTFLIGHT,0/qMult$
			}
			baseIgnitionChance
			{
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,0$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,1$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,2$
			}
			#/TESTFLIGHT,0/restartWindowPenalty {}
			@restartWindowPenalty
			{
				|_ = restartWindowPenalty
			}
		}
	}
	@MODULE[TestFlightFailure_ShutdownEngine]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_ReducedMaxThrust]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_EnginePerformanceLoss]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_Explode]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	
	!TESTFLIGHT,0 {} // remove the node we processed
}

// Iteration #6
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@MODULE[TestFlightCore]
	{
		CONFIG
		{
			title = #$../../TESTFLIGHT,0/name$
			configuration = #$../../TESTFLIGHT,0/mainConf$
			techTransfer = #$../../TESTFLIGHT,0/tech$
		}
	}
	@MODULE[FlightDataRecorder_Engine]
	{
		CONFIG 
		{
			configuration = #$../../TESTFLIGHT,0/name$
			flightDataMultiplier = #$../../TESTFLIGHT,0/dataMult$
		}
	}
	@MODULE[TestFlightReliability]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			reliabilityCurve
			{
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,0$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,1$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,2$
			}
		}
	}
	@MODULE[TestFlightReliability_EngineCycle]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			ratedBurnTime = #$../../TESTFLIGHT,0/ratedBurnTime$
			ratedContinuousBurnTime = #$../../TESTFLIGHT,0/ratedContinuousBurnTime$
			engineConfig = #$../../TESTFLIGHT,0/name$
			cycle
			{
				key = #$../../../TESTFLIGHT,0/cycle/key,0$
				key = #$../../../TESTFLIGHT,0/cycle/key,1$
				key = #$../../../TESTFLIGHT,0/cycle/key,2$
				key = #$../../../TESTFLIGHT,0/cycle/key,3$
			}
			continuousCycle
			{
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,0$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,1$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,2$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,3$
			}
		}
	}
	@MODULE[TestFlightFailure_IgnitionFail]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			additionalFailureChance = #$../../TESTFLIGHT,0/additionalIgnitionFailChance$
			pressureCurve
			{
				qMult = #$../../../TESTFLIGHT,0/qMult$
			}
			baseIgnitionChance
			{
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,0$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,1$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,2$
			}
			#/TESTFLIGHT,0/restartWindowPenalty {}
			@restartWindowPenalty
			{
				|_ = restartWindowPenalty
			}
		}
	}
	@MODULE[TestFlightFailure_ShutdownEngine]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_ReducedMaxThrust]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_EnginePerformanceLoss]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_Explode]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	
	!TESTFLIGHT,0 {} // remove the node we processed
}

// Iteration #7
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@MODULE[TestFlightCore]
	{
		CONFIG
		{
			title = #$../../TESTFLIGHT,0/name$
			configuration = #$../../TESTFLIGHT,0/mainConf$
			techTransfer = #$../../TESTFLIGHT,0/tech$
		}
	}
	@MODULE[FlightDataRecorder_Engine]
	{
		CONFIG 
		{
			configuration = #$../../TESTFLIGHT,0/name$
			flightDataMultiplier = #$../../TESTFLIGHT,0/dataMult$
		}
	}
	@MODULE[TestFlightReliability]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			reliabilityCurve
			{
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,0$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,1$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,2$
			}
		}
	}
	@MODULE[TestFlightReliability_EngineCycle]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			ratedBurnTime = #$../../TESTFLIGHT,0/ratedBurnTime$
			ratedContinuousBurnTime = #$../../TESTFLIGHT,0/ratedContinuousBurnTime$
			engineConfig = #$../../TESTFLIGHT,0/name$
			cycle
			{
				key = #$../../../TESTFLIGHT,0/cycle/key,0$
				key = #$../../../TESTFLIGHT,0/cycle/key,1$
				key = #$../../../TESTFLIGHT,0/cycle/key,2$
				key = #$../../../TESTFLIGHT,0/cycle/key,3$
			}
			continuousCycle
			{
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,0$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,1$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,2$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,3$
			}
		}
	}
	@MODULE[TestFlightFailure_IgnitionFail]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			additionalFailureChance = #$../../TESTFLIGHT,0/additionalIgnitionFailChance$
			pressureCurve
			{
				qMult = #$../../../TESTFLIGHT,0/qMult$
			}
			baseIgnitionChance
			{
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,0$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,1$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,2$
			}
			#/TESTFLIGHT,0/restartWindowPenalty {}
			@restartWindowPenalty
			{
				|_ = restartWindowPenalty
			}
		}
	}
	@MODULE[TestFlightFailure_ShutdownEngine]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_ReducedMaxThrust]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_EnginePerformanceLoss]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_Explode]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	
	!TESTFLIGHT,0 {} // remove the node we processed
}

// Iteration #8
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@MODULE[TestFlightCore]
	{
		CONFIG
		{
			title = #$../../TESTFLIGHT,0/name$
			configuration = #$../../TESTFLIGHT,0/mainConf$
			techTransfer = #$../../TESTFLIGHT,0/tech$
		}
	}
	@MODULE[FlightDataRecorder_Engine]
	{
		CONFIG 
		{
			configuration = #$../../TESTFLIGHT,0/name$
			flightDataMultiplier = #$../../TESTFLIGHT,0/dataMult$
		}
	}
	@MODULE[TestFlightReliability]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			reliabilityCurve
			{
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,0$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,1$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,2$
			}
		}
	}
	@MODULE[TestFlightReliability_EngineCycle]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			ratedBurnTime = #$../../TESTFLIGHT,0/ratedBurnTime$
			ratedContinuousBurnTime = #$../../TESTFLIGHT,0/ratedContinuousBurnTime$
			engineConfig = #$../../TESTFLIGHT,0/name$
			cycle
			{
				key = #$../../../TESTFLIGHT,0/cycle/key,0$
				key = #$../../../TESTFLIGHT,0/cycle/key,1$
				key = #$../../../TESTFLIGHT,0/cycle/key,2$
				key = #$../../../TESTFLIGHT,0/cycle/key,3$
			}
			continuousCycle
			{
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,0$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,1$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,2$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,3$
			}
		}
	}
	@MODULE[TestFlightFailure_IgnitionFail]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			additionalFailureChance = #$../../TESTFLIGHT,0/additionalIgnitionFailChance$
			pressureCurve
			{
				qMult = #$../../../TESTFLIGHT,0/qMult$
			}
			baseIgnitionChance
			{
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,0$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,1$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,2$
			}
			#/TESTFLIGHT,0/restartWindowPenalty {}
			@restartWindowPenalty
			{
				|_ = restartWindowPenalty
			}
		}
	}
	@MODULE[TestFlightFailure_ShutdownEngine]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_ReducedMaxThrust]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_EnginePerformanceLoss]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_Explode]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	
	!TESTFLIGHT,0 {} // remove the node we processed
}

// Iteration #9
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@MODULE[TestFlightCore]
	{
		CONFIG
		{
			title = #$../../TESTFLIGHT,0/name$
			configuration = #$../../TESTFLIGHT,0/mainConf$
			techTransfer = #$../../TESTFLIGHT,0/tech$
		}
	}
	@MODULE[FlightDataRecorder_Engine]
	{
		CONFIG 
		{
			configuration = #$../../TESTFLIGHT,0/name$
			flightDataMultiplier = #$../../TESTFLIGHT,0/dataMult$
		}
	}
	@MODULE[TestFlightReliability]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			reliabilityCurve
			{
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,0$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,1$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,2$
			}
		}
	}
	@MODULE[TestFlightReliability_EngineCycle]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			ratedBurnTime = #$../../TESTFLIGHT,0/ratedBurnTime$
			ratedContinuousBurnTime = #$../../TESTFLIGHT,0/ratedContinuousBurnTime$
			engineConfig = #$../../TESTFLIGHT,0/name$
			cycle
			{
				key = #$../../../TESTFLIGHT,0/cycle/key,0$
				key = #$../../../TESTFLIGHT,0/cycle/key,1$
				key = #$../../../TESTFLIGHT,0/cycle/key,2$
				key = #$../../../TESTFLIGHT,0/cycle/key,3$
			}
			continuousCycle
			{
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,0$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,1$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,2$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,3$
			}
		}
	}
	@MODULE[TestFlightFailure_IgnitionFail]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			additionalFailureChance = #$../../TESTFLIGHT,0/additionalIgnitionFailChance$
			pressureCurve
			{
				qMult = #$../../../TESTFLIGHT,0/qMult$
			}
			baseIgnitionChance
			{
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,0$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,1$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,2$
			}
			#/TESTFLIGHT,0/restartWindowPenalty {}
			@restartWindowPenalty
			{
				|_ = restartWindowPenalty
			}
		}
	}
	@MODULE[TestFlightFailure_ShutdownEngine]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_ReducedMaxThrust]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_EnginePerformanceLoss]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_Explode]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	
	!TESTFLIGHT,0 {} // remove the node we processed
}

// Iteration #10
@PART:HAS[@TESTFLIGHT]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@MODULE[TestFlightCore]
	{
		CONFIG
		{
			title = #$../../TESTFLIGHT,0/name$
			configuration = #$../../TESTFLIGHT,0/mainConf$
			techTransfer = #$../../TESTFLIGHT,0/tech$
		}
	}
	@MODULE[FlightDataRecorder_Engine]
	{
		CONFIG 
		{
			configuration = #$../../TESTFLIGHT,0/name$
			flightDataMultiplier = #$../../TESTFLIGHT,0/dataMult$
		}
	}
	@MODULE[TestFlightReliability]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			reliabilityCurve
			{
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,0$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,1$
				key = #$../../../TESTFLIGHT,0/reliabilityCurve/key,2$
			}
		}
	}
	@MODULE[TestFlightReliability_EngineCycle]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			ratedBurnTime = #$../../TESTFLIGHT,0/ratedBurnTime$
			ratedContinuousBurnTime = #$../../TESTFLIGHT,0/ratedContinuousBurnTime$
			engineConfig = #$../../TESTFLIGHT,0/name$
			cycle
			{
				key = #$../../../TESTFLIGHT,0/cycle/key,0$
				key = #$../../../TESTFLIGHT,0/cycle/key,1$
				key = #$../../../TESTFLIGHT,0/cycle/key,2$
				key = #$../../../TESTFLIGHT,0/cycle/key,3$
			}
			continuousCycle
			{
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,0$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,1$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,2$
				key = #$../../../TESTFLIGHT,0/continuousCycle/key,3$
			}
		}
	}
	@MODULE[TestFlightFailure_IgnitionFail]
	{
		CONFIG
		{
			configuration = #$../../TESTFLIGHT,0/name$
			additionalFailureChance = #$../../TESTFLIGHT,0/additionalIgnitionFailChance$
			pressureCurve
			{
				qMult = #$../../../TESTFLIGHT,0/qMult$
			}
			baseIgnitionChance
			{
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,0$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,1$
				key = #$../../../TESTFLIGHT,0/baseIgnitionChance/key,2$
			}
			#/TESTFLIGHT,0/restartWindowPenalty {}
			@restartWindowPenalty
			{
				|_ = restartWindowPenalty
			}
		}
	}
	@MODULE[TestFlightFailure_ShutdownEngine]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_ReducedMaxThrust]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_EnginePerformanceLoss]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	@MODULE[TestFlightFailure_Explode]
	{
		CONFIG { configuration = #$../../TESTFLIGHT,0/name$ }
	}
	
	!TESTFLIGHT,0 {} // remove the node we processed
}


// Set all the constant configuration values here, instead of in the patch-duplicating process.

@PART:HAS[@MODULE[TestFlightCore]]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight]
{
	@MODULE[TestFlightCore]
	{
		@CONFIG,*
		{
			maxData = 10000
			techTransferMax = 2000
		}
	}
	@MODULE[FlightDataRecorder_Engine]
	{
		@CONFIG,*
		{
			flightDataEngineerModifier = 0.4
		}
	}
	@MODULE[TestFlightFailure_ShutdownEngine]
	{
		@CONFIG,*
		{
			REPAIR
			{
				canBeRepairedInFlight = True
				dataSize = 1
				dataScale = 1
				repairChance = 75
				canBeRepairedOnSplashed = True
				canBeRepairedByRemote = True
			}
			duFail = 1100
			weight = 32
			failureType = software
			failureTitle = Engine Shutdown
			duRepair = 50
			severity = major
		}
	}
	@MODULE[TestFlightFailure_IgnitionFail]
	{
		@CONFIG,*
		{
			@pressureCurve
			{
				key = 0 1 0 0
				key = 5000 1 0 0
				key = 15000 0.85 -2.25E-05 -2.25E-05
				key = 30000 0.4
				key = 50000 0.15 0 0
				@key,*[0, ] *= #$qMult$
				!qMult = DEL
			}
			restoreIgnitionCharge = False
			duFail = 1050
			oneShot = True
			failureType = mechanical
			failureTitle = Failed to ignite
			ignorePressureOnPad = True // doesn't actually do anything...
			severity = major
		}
	}
	@MODULE[TestFlightFailure_ReducedMaxThrust]
	{
		@CONFIG,*
		{
			oneShot = True
			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = False
				canBeRepairedByRemote = False
				repairChance = 75
			}
			duFail = 700
			weight = 8
			failureType = mechanical
			failureTitle = Loss of Thrust
			duRepair = 250
			severity = minor
		}
	}
	@MODULE[TestFlightFailure_EnginePerformanceLoss]
	{
		@CONFIG,*
		{
			oneShot = True
			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = False
				canBeRepairedByRemote = False
				repairChance = 75
			}
			duFail = 800
			weight = 16
			failureType = mechanical
			failureTitle = Performance Loss
			duRepair = 250
			severity = minor
			ispMultiplier = 0.5
			ispMultiplierJitter = 0.1
		}
	}
	@MODULE[TestFlightFailure_Explode]
	{
		@CONFIG,*
		{
			failureTitle = Explosion!
			duFail = 1300
			weight = 2
			failureType = mechanical
			severity = major
		}
	}
}
